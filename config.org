#+TITLE: Emacs Configuration
#+AUTHOR: Wen Jun
#+BABEL: :cache yes
#+PROPERTY: header-args :tangle yes

* 关于

  个人配置

* 配置

激活词法作用域

#+BEGIN_SRC emacs-lisp
;;; config.el ---  -*- lexical-binding: t -*-
#+END_SRC

包管理配置

#+BEGIN_SRC emacs-lisp
(setq-default package-archives '(("melpa" . "http://mirrors.bfsu.edu.cn/elpa/melpa/")
                                 ("gnu" . "http://mirrors.bfsu.edu.cn/elpa/gnu/")
                                 ("org" . "http://mirrors.bfsu.edu.cn/elpa/org/")))

(setq-default package-check-signature nil)

(require 'package)

(unless (bound-and-true-p package--initialized)
  (package-initialize))

(unless package-archive-contents
  (package-refresh-contents))
#+END_SRC

配置 =use-package=

#+BEGIN_SRC emacs-lisp
(unless (package-installed-p 'use-package)
  (package-install 'use-package))

(eval-when-compile
  (require 'use-package))

(eval-and-compile
  (setq-default use-package-always-ensure t))
#+END_SRC

配置自动更新

#+BEGIN_SRC emacs-lisp
(use-package auto-package-update
  :custom
  (auto-package-update-interval 7)
  (auto-package-update-prompt-before-update t)
  (auto-package-update-delete-old-versions t)
  (auto-package-update-hide-results t)
  :config
  (auto-package-update-maybe)
  (auto-package-update-at-time "12:00"))
#+END_SRC

输出性能报告

#+BEGIN_SRC emacs-lisp
(use-package benchmark-init
  :init (benchmark-init/activate)
  :hook (after-init . benchmark-init/deactivate))

(defun dp/display-startup-time ()
  (message "Emacs loaded in %.2f seconds with %d garbage collections."
  (float-time (time-subtract after-init-time before-init-time)) gcs-done))

(add-hook 'emacs-startup-hook #'dp/display-startup-time)
#+END_SRC

设置环境变量

#+BEGIN_SRC emacs-lisp
(defconst *is-mac*
  (eq system-type 'darwin)
  "Const for system check, macOS.")

(defconst *is-linux*
  (eq system-type 'gnu/linux)
  "Const for system check, GNU/Linux.")

(defconst *is-windows*
  (or (eq system-type 'ms-dos) (eq system-type 'windows-nt))
  "Const for system check, Windows or DOS.")
#+END_SRC

增强默认设置

#+BEGIN_SRC emacs-lisp
(use-package emacs
  :config
  (when *is-mac*
    (setq-default mac-command-modifier 'meta
                  mac-option-modifier 'super))

  (setq-default inhibit-startup-screen t
                initial-scratch-message ""
                indent-tabs-mode nil
                tab-width 4
                fill-column 100
                custom-file (expand-file-name "custom.el" user-emacs-directory))

  (defalias 'yes-or-no-p 'y-or-n-p))
#+END_SRC

配置主题

#+BEGIN_SRC emacs-lisp
(use-package all-the-icons)

(use-package doom-themes
  :config
  (setq-default doom-themes-enable-bold t
                doom-themes-enable-italic t)
  (load-theme 'doom-solarized-light t))
#+END_SRC

配置状态条

#+BEGIN_SRC emacs-lisp
(use-package doom-modeline
  :config
  (doom-modeline-mode t))
#+END_SRC

配置字体

#+BEGIN_SRC emacs-lisp
(defun dp/get-available-font (font-list)
  (catch 'return
    (dolist (font font-list)
      (when (find-font (font-spec :name font))
        (throw 'return font)))))

(defun dp/set-fonts ()
  (let ((default-fonts '("MonoLisa"
                         "Fira Code"
                         "Source Code Pro")))
    (set-face-attribute 'default nil :font (font-spec :name (dp/get-available-font default-fonts)
                                                      :size 14
                                                      :weight 'semi-light))))

(when (display-graphic-p)
  (dp/set-fonts))
#+END_SRC

配置 =which-key=

#+BEGIN_SRC emacs-lisp
(use-package which-key
  :config
  (which-key-mode))
#+END_SRC

配置 =evil=

#+BEGIN_SRC emacs-lisp
(use-package evil
  :init
  (setq-default evil-want-integration t
                evil-want-keybinding nil)
  :config
  (setq-default evil-emacs-state-cursor '("red" box)
                evil-normal-state-cursor '("green" box)
                evil-visual-state-cursor '("orange" box)
                evil-insert-state-cursor '("red" bar)
                evil-replace-state-cursor '("red" hbar)
                evil-operator-state-cursor '("red" hollow))
  (evil-mode t))

(use-package evil-collection
  :after evil
  :config
  (evil-collection-init))
#+END_SRC

快读打开配置

#+BEGIN_SRC emacs-lisp
(defun dp/open-private-config ()
  (interactive)
  (find-file (expand-file-name "config.org" user-emacs-directory)))
#+END_SRC

快速重启

#+BEGIN_SRC emacs-lisp
(use-package restart-emacs
  :config
  (setq-default restart-emacs-restore-frames t))
#+END_SRC

配置 =recentf=

#+BEGIN_SRC emacs-lisp
(use-package recentf
  :config
  (recentf-mode))
#+END_SRC

配置 =swiper= =ivy= =counsel= 三剑客

#+BEGIN_SRC emacs-lisp
(use-package swiper)

(use-package ivy
  :config
  (ivy-mode t))

(use-package counsel
  :config
  (counsel-mode t))
#+END_SRC

使用 =general= 管理快捷键

#+BEGIN_SRC emacs-lisp
(use-package general
  :config
  (general-create-definer dp/quit-leader-def
    :states 'normal
    :prefix "SPC q"
    "" '(:ignore t :which-key "quit"))
  (general-create-definer dp/open-leader-def
    :states 'normal
    :prefix "SPC o"
    "" '(:ignore t :which-key "open"))
  (general-create-definer dp/buffer-leader-def
    :states 'normal
    :prefix "SPC b"
    "" '(:ignore t :which-key "buffer")))

(dp/open-leader-def 
  "p" 'dp/open-private-config
  "f" 'counsel-find-file
  "r" 'counsel-recentf)

(dp/quit-leader-def 
  "r" 'restart-emacs
  "q" 'save-buffers-kill-emacs
  "Q" 'kill-emacs)

(dp/buffer-leader-def
  "b" 'counsel-switch-buffer
  "s" 'swiper)
#+END_SRC
